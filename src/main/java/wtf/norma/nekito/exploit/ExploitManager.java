package wtf.norma.nekito.exploit;

import wtf.norma.nekito.exploit.impl.creative.*;
import wtf.norma.nekito.exploit.impl.flood.*;
import wtf.norma.nekito.exploit.impl.nbt.*;
import wtf.norma.nekito.exploit.impl.other.*;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

public class ExploitManager {

    private List<Exploit<?>> exploits;

    public ExploitManager() {
        addAll(
                new AnvilExploit(),
                new AttackExploit(),
                new CIPA(),
                new CwelExploit(),
                new KuszkoExploit(),
                new KUSZKOEXPLOIT2(),
                new PedalExploit(),
                new BOMBAEXPLOIT(),
                new BookExploit(),
                new ExploitFixerExploit(),
                new OnePacketExploit(),
                new ChunkLoadExploit(),
                new FaweExploit(),
                new MVCExploit(),
                new MVCEXPLOIT2(),
                new FlyCrasher(),
                new NcpCrasher(),
                new SkriptCrasher(),
                new SpamExploit(),
                new WorldEditCrasher1(),
                new InteractiveChatExploit()
        );
    }

    public void addAll(Exploit<?>... exploits) {
        this.exploits = Arrays.asList(exploits);
    }

    public Optional<Exploit<?>> getExploit(String name) {
        return exploits.stream()
                .filter(exploit -> exploit.getName().equalsIgnoreCase(name))
                .findFirst();
    }

    public Optional<Exploit<?>> getExploit(String name, ExploitType type) {
        return exploits.stream()
                .filter(exploit -> exploit.getName().equalsIgnoreCase(name))
                .filter(exploit -> exploit.getType() == type)
                .findFirst();
    }

    public void registerExploit(Exploit<?> exploit) {
        exploits.add(exploit);
    }

    public void registerExploits(Exploit<?>... exploits) {
        this.exploits.addAll(Arrays.asList(exploits));
    }

    public void unregisterExploit(Exploit<?> exploit) {
        exploits.remove(exploit);
    }

    public void unregisterExploits(Exploit<?>... exploits) {
        this.exploits.removeAll(Arrays.asList(exploits));
    }

    public List<Exploit<?>> getExploits() {
        return exploits;
    }
}
